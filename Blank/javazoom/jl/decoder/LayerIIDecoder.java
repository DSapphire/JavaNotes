package javazoom.jl.decoder;

class LayerIIDecoder
  extends LayerIDecoder
  implements FrameDecoder
{
  protected void createSubbands()
  {
    if (this.mode == 3) {
      for (i = 0; i < this.num_subbands; i++) {
        this.subbands[i] = new SubbandLayer2(i);
      }
    }
    if (this.mode == 1)
    {
      for (i = 0; i < this.header.intensity_stereo_bound(); i++) {
        this.subbands[i] = new SubbandLayer2Stereo(i);
      }
      while (i < this.num_subbands)
      {
        this.subbands[i] = new SubbandLayer2IntensityStereo(i);
        i++;
      }
    }
    for (int i = 0; i < this.num_subbands; i++) {
      this.subbands[i] = new SubbandLayer2Stereo(i);
    }
  }
  
  protected void readScaleFactorSelection()
  {
    for (int i = 0; i < this.num_subbands; i++) {
      ((SubbandLayer2)this.subbands[i]).read_scalefactor_selection(this.stream, this.crc);
    }
  }
  
  static class SubbandLayer2Stereo
    extends LayerIIDecoder.SubbandLayer2
  {
    protected int channel2_allocation;
    protected int channel2_scfsi;
    protected float channel2_scalefactor1;
    protected float channel2_scalefactor2;
    protected float channel2_scalefactor3;
    protected int[] channel2_codelength = { 0 };
    protected float[] channel2_factor = { 0.0F };
    protected float[] channel2_samples = new float[3];
    protected float[] channel2_c = { 0.0F };
    protected float[] channel2_d = { 0.0F };
    
    public SubbandLayer2Stereo(int paramInt)
    {
      super();
    }
    
    public void read_allocation(Bitstream paramBitstream, Header paramHeader, Crc16 paramCrc16)
    {
      int i = get_allocationlength(paramHeader);
      this.allocation = paramBitstream.get_bits(i);
      this.channel2_allocation = paramBitstream.get_bits(i);
      if (paramCrc16 != null)
      {
        paramCrc16.add_bits(this.allocation, i);
        paramCrc16.add_bits(this.channel2_allocation, i);
      }
    }
    
    public void read_scalefactor_selection(Bitstream paramBitstream, Crc16 paramCrc16)
    {
      if (this.allocation != 0)
      {
        this.scfsi = paramBitstream.get_bits(2);
        if (paramCrc16 != null) {
          paramCrc16.add_bits(this.scfsi, 2);
        }
      }
      if (this.channel2_allocation != 0)
      {
        this.channel2_scfsi = paramBitstream.get_bits(2);
        if (paramCrc16 != null) {
          paramCrc16.add_bits(this.channel2_scfsi, 2);
        }
      }
    }
    
    public void read_scalefactor(Bitstream paramBitstream, Header paramHeader)
    {
      super.read_scalefactor(paramBitstream, paramHeader);
      if (this.channel2_allocation != 0)
      {
        switch (this.channel2_scfsi)
        {
        case 0: 
          this.channel2_scalefactor1 = scalefactors[paramBitstream.get_bits(6)];
          this.channel2_scalefactor2 = scalefactors[paramBitstream.get_bits(6)];
          this.channel2_scalefactor3 = scalefactors[paramBitstream.get_bits(6)];
          break;
        case 1: 
          this.channel2_scalefactor1 = (this.channel2_scalefactor2 = scalefactors[paramBitstream.get_bits(6)]);
          this.channel2_scalefactor3 = scalefactors[paramBitstream.get_bits(6)];
          break;
        case 2: 
          this.channel2_scalefactor1 = (this.channel2_scalefactor2 = this.channel2_scalefactor3 = scalefactors[paramBitstream.get_bits(6)]);
          break;
        case 3: 
          this.channel2_scalefactor1 = scalefactors[paramBitstream.get_bits(6)];
          this.channel2_scalefactor2 = (this.channel2_scalefactor3 = scalefactors[paramBitstream.get_bits(6)]);
        }
        prepare_sample_reading(paramHeader, this.channel2_allocation, 1, this.channel2_factor, this.channel2_codelength, this.channel2_c, this.channel2_d);
      }
    }
    
    public boolean read_sampledata(Bitstream paramBitstream)
    {
      boolean bool = super.read_sampledata(paramBitstream);
      if (this.channel2_allocation != 0) {
        if (this.groupingtable[1] != null)
        {
          int i = paramBitstream.get_bits(this.channel2_codelength[0]);
          i += (i << 1);
          float[] arrayOfFloat1 = this.channel2_samples;
          float[] arrayOfFloat2 = this.groupingtable[1];
          int j = 0;
          int k = i;
          arrayOfFloat1[j] = arrayOfFloat2[k];
          k++;
          j++;
          arrayOfFloat1[j] = arrayOfFloat2[k];
          k++;
          j++;
          arrayOfFloat1[j] = arrayOfFloat2[k];
        }
        else
        {
          this.channel2_samples[0] = ((float)(paramBitstream.get_bits(this.channel2_codelength[0]) * this.channel2_factor[0] - 1.0D));
          this.channel2_samples[1] = ((float)(paramBitstream.get_bits(this.channel2_codelength[0]) * this.channel2_factor[0] - 1.0D));
          this.channel2_samples[2] = ((float)(paramBitstream.get_bits(this.channel2_codelength[0]) * this.channel2_factor[0] - 1.0D));
        }
      }
      return bool;
    }
    
    public boolean put_next_sample(int paramInt, SynthesisFilter paramSynthesisFilter1, SynthesisFilter paramSynthesisFilter2)
    {
      boolean bool = super.put_next_sample(paramInt, paramSynthesisFilter1, paramSynthesisFilter2);
      if ((this.channel2_allocation != 0) && (paramInt != 1))
      {
        float f = this.channel2_samples[(this.samplenumber - 1)];
        if (this.groupingtable[1] == null) {
          f = (f + this.channel2_d[0]) * this.channel2_c[0];
        }
        if (this.groupnumber <= 4) {
          f *= this.channel2_scalefactor1;
        } else if (this.groupnumber <= 8) {
          f *= this.channel2_scalefactor2;
        } else {
          f *= this.channel2_scalefactor3;
        }
        if (paramInt == 0) {
          paramSynthesisFilter2.input_sample(f, this.subbandnumber);
        } else {
          paramSynthesisFilter1.input_sample(f, this.subbandnumber);
        }
      }
      return bool;
    }
  }
  
  static class SubbandLayer2IntensityStereo
    extends LayerIIDecoder.SubbandLayer2
  {
    protected int channel2_scfsi;
    protected float channel2_scalefactor1;
    protected float channel2_scalefactor2;
    protected float channel2_scalefactor3;
    
    public SubbandLayer2IntensityStereo(int paramInt)
    {
      super();
    }
    
    public void read_allocation(Bitstream paramBitstream, Header paramHeader, Crc16 paramCrc16)
    {
      super.read_allocation(paramBitstream, paramHeader, paramCrc16);
    }
    
    public void read_scalefactor_selection(Bitstream paramBitstream, Crc16 paramCrc16)
    {
      if (this.allocation != 0)
      {
        this.scfsi = paramBitstream.get_bits(2);
        this.channel2_scfsi = paramBitstream.get_bits(2);
        if (paramCrc16 != null)
        {
          paramCrc16.add_bits(this.scfsi, 2);
          paramCrc16.add_bits(this.channel2_scfsi, 2);
        }
      }
    }
    
    public void read_scalefactor(Bitstream paramBitstream, Header paramHeader)
    {
      if (this.allocation != 0)
      {
        super.read_scalefactor(paramBitstream, paramHeader);
        switch (this.channel2_scfsi)
        {
        case 0: 
          this.channel2_scalefactor1 = scalefactors[paramBitstream.get_bits(6)];
          this.channel2_scalefactor2 = scalefactors[paramBitstream.get_bits(6)];
          this.channel2_scalefactor3 = scalefactors[paramBitstream.get_bits(6)];
          break;
        case 1: 
          this.channel2_scalefactor1 = (this.channel2_scalefactor2 = scalefactors[paramBitstream.get_bits(6)]);
          this.channel2_scalefactor3 = scalefactors[paramBitstream.get_bits(6)];
          break;
        case 2: 
          this.channel2_scalefactor1 = (this.channel2_scalefactor2 = this.channel2_scalefactor3 = scalefactors[paramBitstream.get_bits(6)]);
          break;
        case 3: 
          this.channel2_scalefactor1 = scalefactors[paramBitstream.get_bits(6)];
          this.channel2_scalefactor2 = (this.channel2_scalefactor3 = scalefactors[paramBitstream.get_bits(6)]);
        }
      }
    }
    
    public boolean read_sampledata(Bitstream paramBitstream)
    {
      return super.read_sampledata(paramBitstream);
    }
    
    public boolean put_next_sample(int paramInt, SynthesisFilter paramSynthesisFilter1, SynthesisFilter paramSynthesisFilter2)
    {
      if (this.allocation != 0)
      {
        float f1 = this.samples[this.samplenumber];
        if (this.groupingtable[0] == null) {
          f1 = (f1 + this.d[0]) * this.c[0];
        }
        if (paramInt == 0)
        {
          float f2 = f1;
          if (this.groupnumber <= 4)
          {
            f1 *= this.scalefactor1;
            f2 *= this.channel2_scalefactor1;
          }
          else if (this.groupnumber <= 8)
          {
            f1 *= this.scalefactor2;
            f2 *= this.channel2_scalefactor2;
          }
          else
          {
            f1 *= this.scalefactor3;
            f2 *= this.channel2_scalefactor3;
          }
          paramSynthesisFilter1.input_sample(f1, this.subbandnumber);
          paramSynthesisFilter2.input_sample(f2, this.subbandnumber);
        }
        else if (paramInt == 1)
        {
          if (this.groupnumber <= 4) {
            f1 *= this.scalefactor1;
          } else if (this.groupnumber <= 8) {
            f1 *= this.scalefactor2;
          } else {
            f1 *= this.scalefactor3;
          }
          paramSynthesisFilter1.input_sample(f1, this.subbandnumber);
        }
        else
        {
          if (this.groupnumber <= 4) {
            f1 *= this.channel2_scalefactor1;
          } else if (this.groupnumber <= 8) {
            f1 *= this.channel2_scalefactor2;
          } else {
            f1 *= this.channel2_scalefactor3;
          }
          paramSynthesisFilter1.input_sample(f1, this.subbandnumber);
        }
      }
      return ++this.samplenumber == 3;
    }
  }
  
  static class SubbandLayer2
    extends LayerIDecoder.Subband
  {
    public static final float[] grouping_5bits = { -0.6666667F, -0.6666667F, -0.6666667F, 0.0F, -0.6666667F, -0.6666667F, 0.6666667F, -0.6666667F, -0.6666667F, -0.6666667F, 0.0F, -0.6666667F, 0.0F, 0.0F, -0.6666667F, 0.6666667F, 0.0F, -0.6666667F, -0.6666667F, 0.6666667F, -0.6666667F, 0.0F, 0.6666667F, -0.6666667F, 0.6666667F, 0.6666667F, -0.6666667F, -0.6666667F, -0.6666667F, 0.0F, 0.0F, -0.6666667F, 0.0F, 0.6666667F, -0.6666667F, 0.0F, -0.6666667F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.6666667F, 0.0F, 0.0F, -0.6666667F, 0.6666667F, 0.0F, 0.0F, 0.6666667F, 0.0F, 0.6666667F, 0.6666667F, 0.0F, -0.6666667F, -0.6666667F, 0.6666667F, 0.0F, -0.6666667F, 0.6666667F, 0.6666667F, -0.6666667F, 0.6666667F, -0.6666667F, 0.0F, 0.6666667F, 0.0F, 0.0F, 0.6666667F, 0.6666667F, 0.0F, 0.6666667F, -0.6666667F, 0.6666667F, 0.6666667F, 0.0F, 0.6666667F, 0.6666667F, 0.6666667F, 0.6666667F, 0.6666667F };
    public static final float[] grouping_7bits = { -0.8F, -0.8F, -0.8F, -0.4F, -0.8F, -0.8F, 0.0F, -0.8F, -0.8F, 0.4F, -0.8F, -0.8F, 0.8F, -0.8F, -0.8F, -0.8F, -0.4F, -0.8F, -0.4F, -0.4F, -0.8F, 0.0F, -0.4F, -0.8F, 0.4F, -0.4F, -0.8F, 0.8F, -0.4F, -0.8F, -0.8F, 0.0F, -0.8F, -0.4F, 0.0F, -0.8F, 0.0F, 0.0F, -0.8F, 0.4F, 0.0F, -0.8F, 0.8F, 0.0F, -0.8F, -0.8F, 0.4F, -0.8F, -0.4F, 0.4F, -0.8F, 0.0F, 0.4F, -0.8F, 0.4F, 0.4F, -0.8F, 0.8F, 0.4F, -0.8F, -0.8F, 0.8F, -0.8F, -0.4F, 0.8F, -0.8F, 0.0F, 0.8F, -0.8F, 0.4F, 0.8F, -0.8F, 0.8F, 0.8F, -0.8F, -0.8F, -0.8F, -0.4F, -0.4F, -0.8F, -0.4F, 0.0F, -0.8F, -0.4F, 0.4F, -0.8F, -0.4F, 0.8F, -0.8F, -0.4F, -0.8F, -0.4F, -0.4F, -0.4F, -0.4F, -0.4F, 0.0F, -0.4F, -0.4F, 0.4F, -0.4F, -0.4F, 0.8F, -0.4F, -0.4F, -0.8F, 0.0F, -0.4F, -0.4F, 0.0F, -0.4F, 0.0F, 0.0F, -0.4F, 0.4F, 0.0F, -0.4F, 0.8F, 0.0F, -0.4F, -0.8F, 0.4F, -0.4F, -0.4F, 0.4F, -0.4F, 0.0F, 0.4F, -0.4F, 0.4F, 0.4F, -0.4F, 0.8F, 0.4F, -0.4F, -0.8F, 0.8F, -0.4F, -0.4F, 0.8F, -0.4F, 0.0F, 0.8F, -0.4F, 0.4F, 0.8F, -0.4F, 0.8F, 0.8F, -0.4F, -0.8F, -0.8F, 0.0F, -0.4F, -0.8F, 0.0F, 0.0F, -0.8F, 0.0F, 0.4F, -0.8F, 0.0F, 0.8F, -0.8F, 0.0F, -0.8F, -0.4F, 0.0F, -0.4F, -0.4F, 0.0F, 0.0F, -0.4F, 0.0F, 0.4F, -0.4F, 0.0F, 0.8F, -0.4F, 0.0F, -0.8F, 0.0F, 0.0F, -0.4F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.4F, 0.0F, 0.0F, 0.8F, 0.0F, 0.0F, -0.8F, 0.4F, 0.0F, -0.4F, 0.4F, 0.0F, 0.0F, 0.4F, 0.0F, 0.4F, 0.4F, 0.0F, 0.8F, 0.4F, 0.0F, -0.8F, 0.8F, 0.0F, -0.4F, 0.8F, 0.0F, 0.0F, 0.8F, 0.0F, 0.4F, 0.8F, 0.0F, 0.8F, 0.8F, 0.0F, -0.8F, -0.8F, 0.4F, -0.4F, -0.8F, 0.4F, 0.0F, -0.8F, 0.4F, 0.4F, -0.8F, 0.4F, 0.8F, -0.8F, 0.4F, -0.8F, -0.4F, 0.4F, -0.4F, -0.4F, 0.4F, 0.0F, -0.4F, 0.4F, 0.4F, -0.4F, 0.4F, 0.8F, -0.4F, 0.4F, -0.8F, 0.0F, 0.4F, -0.4F, 0.0F, 0.4F, 0.0F, 0.0F, 0.4F, 0.4F, 0.0F, 0.4F, 0.8F, 0.0F, 0.4F, -0.8F, 0.4F, 0.4F, -0.4F, 0.4F, 0.4F, 0.0F, 0.4F, 0.4F, 0.4F, 0.4F, 0.4F, 0.8F, 0.4F, 0.4F, -0.8F, 0.8F, 0.4F, -0.4F, 0.8F, 0.4F, 0.0F, 0.8F, 0.4F, 0.4F, 0.8F, 0.4F, 0.8F, 0.8F, 0.4F, -0.8F, -0.8F, 0.8F, -0.4F, -0.8F, 0.8F, 0.0F, -0.8F, 0.8F, 0.4F, -0.8F, 0.8F, 0.8F, -0.8F, 0.8F, -0.8F, -0.4F, 0.8F, -0.4F, -0.4F, 0.8F, 0.0F, -0.4F, 0.8F, 0.4F, -0.4F, 0.8F, 0.8F, -0.4F, 0.8F, -0.8F, 0.0F, 0.8F, -0.4F, 0.0F, 0.8F, 0.0F, 0.0F, 0.8F, 0.4F, 0.0F, 0.8F, 0.8F, 0.0F, 0.8F, -0.8F, 0.4F, 0.8F, -0.4F, 0.4F, 0.8F, 0.0F, 0.4F, 0.8F, 0.4F, 0.4F, 0.8F, 0.8F, 0.4F, 0.8F, -0.8F, 0.8F, 0.8F, -0.4F, 0.8F, 0.8F, 0.0F, 0.8F, 0.8F, 0.4F, 0.8F, 0.8F, 0.8F, 0.8F, 0.8F };
    public static final float[] grouping_10bits = { -0.8888889F, -0.8888889F, -0.8888889F, -0.6666667F, -0.8888889F, -0.8888889F, -0.44444445F, -0.8888889F, -0.8888889F, -0.22222222F, -0.8888889F, -0.8888889F, 0.0F, -0.8888889F, -0.8888889F, 0.22222222F, -0.8888889F, -0.8888889F, 0.44444445F, -0.8888889F, -0.8888889F, 0.6666667F, -0.8888889F, -0.8888889F, 0.8888889F, -0.8888889F, -0.8888889F, -0.8888889F, -0.6666667F, -0.8888889F, -0.6666667F, -0.6666667F, -0.8888889F, -0.44444445F, -0.6666667F, -0.8888889F, -0.22222222F, -0.6666667F, -0.8888889F, 0.0F, -0.6666667F, -0.8888889F, 0.22222222F, -0.6666667F, -0.8888889F, 0.44444445F, -0.6666667F, -0.8888889F, 0.6666667F, -0.6666667F, -0.8888889F, 0.8888889F, -0.6666667F, -0.8888889F, -0.8888889F, -0.44444445F, -0.8888889F, -0.6666667F, -0.44444445F, -0.8888889F, -0.44444445F, -0.44444445F, -0.8888889F, -0.22222222F, -0.44444445F, -0.8888889F, 0.0F, -0.44444445F, -0.8888889F, 0.22222222F, -0.44444445F, -0.8888889F, 0.44444445F, -0.44444445F, -0.8888889F, 0.6666667F, -0.44444445F, -0.8888889F, 0.8888889F, -0.44444445F, -0.8888889F, -0.8888889F, -0.22222222F, -0.8888889F, -0.6666667F, -0.22222222F, -0.8888889F, -0.44444445F, -0.22222222F, -0.8888889F, -0.22222222F, -0.22222222F, -0.8888889F, 0.0F, -0.22222222F, -0.8888889F, 0.22222222F, -0.22222222F, -0.8888889F, 0.44444445F, -0.22222222F, -0.8888889F, 0.6666667F, -0.22222222F, -0.8888889F, 0.8888889F, -0.22222222F, -0.8888889F, -0.8888889F, 0.0F, -0.8888889F, -0.6666667F, 0.0F, -0.8888889F, -0.44444445F, 0.0F, -0.8888889F, -0.22222222F, 0.0F, -0.8888889F, 0.0F, 0.0F, -0.8888889F, 0.22222222F, 0.0F, -0.8888889F, 0.44444445F, 0.0F, -0.8888889F, 0.6666667F, 0.0F, -0.8888889F, 0.8888889F, 0.0F, -0.8888889F, -0.8888889F, 0.22222222F, -0.8888889F, -0.6666667F, 0.22222222F, -0.8888889F, -0.44444445F, 0.22222222F, -0.8888889F, -0.22222222F, 0.22222222F, -0.8888889F, 0.0F, 0.22222222F, -0.8888889F, 0.22222222F, 0.22222222F, -0.8888889F, 0.44444445F, 0.22222222F, -0.8888889F, 0.6666667F, 0.22222222F, -0.8888889F, 0.8888889F, 0.22222222F, -0.8888889F, -0.8888889F, 0.44444445F, -0.8888889F, -0.6666667F, 0.44444445F, -0.8888889F, -0.44444445F, 0.44444445F, -0.8888889F, -0.22222222F, 0.44444445F, -0.8888889F, 0.0F, 0.44444445F, -0.8888889F, 0.22222222F, 0.44444445F, -0.8888889F, 0.44444445F, 0.44444445F, -0.8888889F, 0.6666667F, 0.44444445F, -0.8888889F, 0.8888889F, 0.44444445F, -0.8888889F, -0.8888889F, 0.6666667F, -0.8888889F, -0.6666667F, 0.6666667F, -0.8888889F, -0.44444445F, 0.6666667F, -0.8888889F, -0.22222222F, 0.6666667F, -0.8888889F, 0.0F, 0.6666667F, -0.8888889F, 0.22222222F, 0.6666667F, -0.8888889F, 0.44444445F, 0.6666667F, -0.8888889F, 0.6666667F, 0.6666667F, -0.8888889F, 0.8888889F, 0.6666667F, -0.8888889F, -0.8888889F, 0.8888889F, -0.8888889F, -0.6666667F, 0.8888889F, -0.8888889F, -0.44444445F, 0.8888889F, -0.8888889F, -0.22222222F, 0.8888889F, -0.8888889F, 0.0F, 0.8888889F, -0.8888889F, 0.22222222F, 0.8888889F, -0.8888889F, 0.44444445F, 0.8888889F, -0.8888889F, 0.6666667F, 0.8888889F, -0.8888889F, 0.8888889F, 0.8888889F, -0.8888889F, -0.8888889F, -0.8888889F, -0.6666667F, -0.6666667F, -0.8888889F, -0.6666667F, -0.44444445F, -0.8888889F, -0.6666667F, -0.22222222F, -0.8888889F, -0.6666667F, 0.0F, -0.8888889F, -0.6666667F, 0.22222222F, -0.8888889F, -0.6666667F, 0.44444445F, -0.8888889F, -0.6666667F, 0.6666667F, -0.8888889F, -0.6666667F, 0.8888889F, -0.8888889F, -0.6666667F, -0.8888889F, -0.6666667F, -0.6666667F, -0.6666667F, -0.6666667F, -0.6666667F, -0.44444445F, -0.6666667F, -0.6666667F, -0.22222222F, -0.6666667F, -0.6666667F, 0.0F, -0.6666667F, -0.6666667F, 0.22222222F, -0.6666667F, -0.6666667F, 0.44444445F, -0.6666667F, -0.6666667F, 0.6666667F, -0.6666667F, -0.6666667F, 0.8888889F, -0.6666667F, -0.6666667F, -0.8888889F, -0.44444445F, -0.6666667F, -0.6666667F, -0.44444445F, -0.6666667F, -0.44444445F, -0.44444445F, -0.6666667F, -0.22222222F, -0.44444445F, -0.6666667F, 0.0F, -0.44444445F, -0.6666667F, 0.22222222F, -0.44444445F, -0.6666667F, 0.44444445F, -0.44444445F, -0.6666667F, 0.6666667F, -0.44444445F, -0.6666667F, 0.8888889F, -0.44444445F, -0.6666667F, -0.8888889F, -0.22222222F, -0.6666667F, -0.6666667F, -0.22222222F, -0.6666667F, -0.44444445F, -0.22222222F, -0.6666667F, -0.22222222F, -0.22222222F, -0.6666667F, 0.0F, -0.22222222F, -0.6666667F, 0.22222222F, -0.22222222F, -0.6666667F, 0.44444445F, -0.22222222F, -0.6666667F, 0.6666667F, -0.22222222F, -0.6666667F, 0.8888889F, -0.22222222F, -0.6666667F, -0.8888889F, 0.0F, -0.6666667F, -0.6666667F, 0.0F, -0.6666667F, -0.44444445F, 0.0F, -0.6666667F, -0.22222222F, 0.0F, -0.6666667F, 0.0F, 0.0F, -0.6666667F, 0.22222222F, 0.0F, -0.6666667F, 0.44444445F, 0.0F, -0.6666667F, 0.6666667F, 0.0F, -0.6666667F, 0.8888889F, 0.0F, -0.6666667F, -0.8888889F, 0.22222222F, -0.6666667F, -0.6666667F, 0.22222222F, -0.6666667F, -0.44444445F, 0.22222222F, -0.6666667F, -0.22222222F, 0.22222222F, -0.6666667F, 0.0F, 0.22222222F, -0.6666667F, 0.22222222F, 0.22222222F, -0.6666667F, 0.44444445F, 0.22222222F, -0.6666667F, 0.6666667F, 0.22222222F, -0.6666667F, 0.8888889F, 0.22222222F, -0.6666667F, -0.8888889F, 0.44444445F, -0.6666667F, -0.6666667F, 0.44444445F, -0.6666667F, -0.44444445F, 0.44444445F, -0.6666667F, -0.22222222F, 0.44444445F, -0.6666667F, 0.0F, 0.44444445F, -0.6666667F, 0.22222222F, 0.44444445F, -0.6666667F, 0.44444445F, 0.44444445F, -0.6666667F, 0.6666667F, 0.44444445F, -0.6666667F, 0.8888889F, 0.44444445F, -0.6666667F, -0.8888889F, 0.6666667F, -0.6666667F, -0.6666667F, 0.6666667F, -0.6666667F, -0.44444445F, 0.6666667F, -0.6666667F, -0.22222222F, 0.6666667F, -0.6666667F, 0.0F, 0.6666667F, -0.6666667F, 0.22222222F, 0.6666667F, -0.6666667F, 0.44444445F, 0.6666667F, -0.6666667F, 0.6666667F, 0.6666667F, -0.6666667F, 0.8888889F, 0.6666667F, -0.6666667F, -0.8888889F, 0.8888889F, -0.6666667F, -0.6666667F, 0.8888889F, -0.6666667F, -0.44444445F, 0.8888889F, -0.6666667F, -0.22222222F, 0.8888889F, -0.6666667F, 0.0F, 0.8888889F, -0.6666667F, 0.22222222F, 0.8888889F, -0.6666667F, 0.44444445F, 0.8888889F, -0.6666667F, 0.6666667F, 0.8888889F, -0.6666667F, 0.8888889F, 0.8888889F, -0.6666667F, -0.8888889F, -0.8888889F, -0.44444445F, -0.6666667F, -0.8888889F, -0.44444445F, -0.44444445F, -0.8888889F, -0.44444445F, -0.22222222F, -0.8888889F, -0.44444445F, 0.0F, -0.8888889F, -0.44444445F, 0.22222222F, -0.8888889F, -0.44444445F, 0.44444445F, -0.8888889F, -0.44444445F, 0.6666667F, -0.8888889F, -0.44444445F, 0.8888889F, -0.8888889F, -0.44444445F, -0.8888889F, -0.6666667F, -0.44444445F, -0.6666667F, -0.6666667F, -0.44444445F, -0.44444445F, -0.6666667F, -0.44444445F, -0.22222222F, -0.6666667F, -0.44444445F, 0.0F, -0.6666667F, -0.44444445F, 0.22222222F, -0.6666667F, -0.44444445F, 0.44444445F, -0.6666667F, -0.44444445F, 0.6666667F, -0.6666667F, -0.44444445F, 0.8888889F, -0.6666667F, -0.44444445F, -0.8888889F, -0.44444445F, -0.44444445F, -0.6666667F, -0.44444445F, -0.44444445F, -0.44444445F, -0.44444445F, -0.44444445F, -0.22222222F, -0.44444445F, -0.44444445F, 0.0F, -0.44444445F, -0.44444445F, 0.22222222F, -0.44444445F, -0.44444445F, 0.44444445F, -0.44444445F, -0.44444445F, 0.6666667F, -0.44444445F, -0.44444445F, 0.8888889F, -0.44444445F, -0.44444445F, -0.8888889F, -0.22222222F, -0.44444445F, -0.6666667F, -0.22222222F, -0.44444445F, -0.44444445F, -0.22222222F, -0.44444445F, -0.22222222F, -0.22222222F, -0.44444445F, 0.0F, -0.22222222F, -0.44444445F, 0.22222222F, -0.22222222F, -0.44444445F, 0.44444445F, -0.22222222F, -0.44444445F, 0.6666667F, -0.22222222F, -0.44444445F, 0.8888889F, -0.22222222F, -0.44444445F, -0.8888889F, 0.0F, -0.44444445F, -0.6666667F, 0.0F, -0.44444445F, -0.44444445F, 0.0F, -0.44444445F, -0.22222222F, 0.0F, -0.44444445F, 0.0F, 0.0F, -0.44444445F, 0.22222222F, 0.0F, -0.44444445F, 0.44444445F, 0.0F, -0.44444445F, 0.6666667F, 0.0F, -0.44444445F, 0.8888889F, 0.0F, -0.44444445F, -0.8888889F, 0.22222222F, -0.44444445F, -0.6666667F, 0.22222222F, -0.44444445F, -0.44444445F, 0.22222222F, -0.44444445F, -0.22222222F, 0.22222222F, -0.44444445F, 0.0F, 0.22222222F, -0.44444445F, 0.22222222F, 0.22222222F, -0.44444445F, 0.44444445F, 0.22222222F, -0.44444445F, 0.6666667F, 0.22222222F, -0.44444445F, 0.8888889F, 0.22222222F, -0.44444445F, -0.8888889F, 0.44444445F, -0.44444445F, -0.6666667F, 0.44444445F, -0.44444445F, -0.44444445F, 0.44444445F, -0.44444445F, -0.22222222F, 0.44444445F, -0.44444445F, 0.0F, 0.44444445F, -0.44444445F, 0.22222222F, 0.44444445F, -0.44444445F, 0.44444445F, 0.44444445F, -0.44444445F, 0.6666667F, 0.44444445F, -0.44444445F, 0.8888889F, 0.44444445F, -0.44444445F, -0.8888889F, 0.6666667F, -0.44444445F, -0.6666667F, 0.6666667F, -0.44444445F, -0.44444445F, 0.6666667F, -0.44444445F, -0.22222222F, 0.6666667F, -0.44444445F, 0.0F, 0.6666667F, -0.44444445F, 0.22222222F, 0.6666667F, -0.44444445F, 0.44444445F, 0.6666667F, -0.44444445F, 0.6666667F, 0.6666667F, -0.44444445F, 0.8888889F, 0.6666667F, -0.44444445F, -0.8888889F, 0.8888889F, -0.44444445F, -0.6666667F, 0.8888889F, -0.44444445F, -0.44444445F, 0.8888889F, -0.44444445F, -0.22222222F, 0.8888889F, -0.44444445F, 0.0F, 0.8888889F, -0.44444445F, 0.22222222F, 0.8888889F, -0.44444445F, 0.44444445F, 0.8888889F, -0.44444445F, 0.6666667F, 0.8888889F, -0.44444445F, 0.8888889F, 0.8888889F, -0.44444445F, -0.8888889F, -0.8888889F, -0.22222222F, -0.6666667F, -0.8888889F, -0.22222222F, -0.44444445F, -0.8888889F, -0.22222222F, -0.22222222F, -0.8888889F, -0.22222222F, 0.0F, -0.8888889F, -0.22222222F, 0.22222222F, -0.8888889F, -0.22222222F, 0.44444445F, -0.8888889F, -0.22222222F, 0.6666667F, -0.8888889F, -0.22222222F, 0.8888889F, -0.8888889F, -0.22222222F, -0.8888889F, -0.6666667F, -0.22222222F, -0.6666667F, -0.6666667F, -0.22222222F, -0.44444445F, -0.6666667F, -0.22222222F, -0.22222222F, -0.6666667F, -0.22222222F, 0.0F, -0.6666667F, -0.22222222F, 0.22222222F, -0.6666667F, -0.22222222F, 0.44444445F, -0.6666667F, -0.22222222F, 0.6666667F, -0.6666667F, -0.22222222F, 0.8888889F, -0.6666667F, -0.22222222F, -0.8888889F, -0.44444445F, -0.22222222F, -0.6666667F, -0.44444445F, -0.22222222F, -0.44444445F, -0.44444445F, -0.22222222F, -0.22222222F, -0.44444445F, -0.22222222F, 0.0F, -0.44444445F, -0.22222222F, 0.22222222F, -0.44444445F, -0.22222222F, 0.44444445F, -0.44444445F, -0.22222222F, 0.6666667F, -0.44444445F, -0.22222222F, 0.8888889F, -0.44444445F, -0.22222222F, -0.8888889F, -0.22222222F, -0.22222222F, -0.6666667F, -0.22222222F, -0.22222222F, -0.44444445F, -0.22222222F, -0.22222222F, -0.22222222F, -0.22222222F, -0.22222222F, 0.0F, -0.22222222F, -0.22222222F, 0.22222222F, -0.22222222F, -0.22222222F, 0.44444445F, -0.22222222F, -0.22222222F, 0.6666667F, -0.22222222F, -0.22222222F, 0.8888889F, -0.22222222F, -0.22222222F, -0.8888889F, 0.0F, -0.22222222F, -0.6666667F, 0.0F, -0.22222222F, -0.44444445F, 0.0F, -0.22222222F, -0.22222222F, 0.0F, -0.22222222F, 0.0F, 0.0F, -0.22222222F, 0.22222222F, 0.0F, -0.22222222F, 0.44444445F, 0.0F, -0.22222222F, 0.6666667F, 0.0F, -0.22222222F, 0.8888889F, 0.0F, -0.22222222F, -0.8888889F, 0.22222222F, -0.22222222F, -0.6666667F, 0.22222222F, -0.22222222F, -0.44444445F, 0.22222222F, -0.22222222F, -0.22222222F, 0.22222222F, -0.22222222F, 0.0F, 0.22222222F, -0.22222222F, 0.22222222F, 0.22222222F, -0.22222222F, 0.44444445F, 0.22222222F, -0.22222222F, 0.6666667F, 0.22222222F, -0.22222222F, 0.8888889F, 0.22222222F, -0.22222222F, -0.8888889F, 0.44444445F, -0.22222222F, -0.6666667F, 0.44444445F, -0.22222222F, -0.44444445F, 0.44444445F, -0.22222222F, -0.22222222F, 0.44444445F, -0.22222222F, 0.0F, 0.44444445F, -0.22222222F, 0.22222222F, 0.44444445F, -0.22222222F, 0.44444445F, 0.44444445F, -0.22222222F, 0.6666667F, 0.44444445F, -0.22222222F, 0.8888889F, 0.44444445F, -0.22222222F, -0.8888889F, 0.6666667F, -0.22222222F, -0.6666667F, 0.6666667F, -0.22222222F, -0.44444445F, 0.6666667F, -0.22222222F, -0.22222222F, 0.6666667F, -0.22222222F, 0.0F, 0.6666667F, -0.22222222F, 0.22222222F, 0.6666667F, -0.22222222F, 0.44444445F, 0.6666667F, -0.22222222F, 0.6666667F, 0.6666667F, -0.22222222F, 0.8888889F, 0.6666667F, -0.22222222F, -0.8888889F, 0.8888889F, -0.22222222F, -0.6666667F, 0.8888889F, -0.22222222F, -0.44444445F, 0.8888889F, -0.22222222F, -0.22222222F, 0.8888889F, -0.22222222F, 0.0F, 0.8888889F, -0.22222222F, 0.22222222F, 0.8888889F, -0.22222222F, 0.44444445F, 0.8888889F, -0.22222222F, 0.6666667F, 0.8888889F, -0.22222222F, 0.8888889F, 0.8888889F, -0.22222222F, -0.8888889F, -0.8888889F, 0.0F, -0.6666667F, -0.8888889F, 0.0F, -0.44444445F, -0.8888889F, 0.0F, -0.22222222F, -0.8888889F, 0.0F, 0.0F, -0.8888889F, 0.0F, 0.22222222F, -0.8888889F, 0.0F, 0.44444445F, -0.8888889F, 0.0F, 0.6666667F, -0.8888889F, 0.0F, 0.8888889F, -0.8888889F, 0.0F, -0.8888889F, -0.6666667F, 0.0F, -0.6666667F, -0.6666667F, 0.0F, -0.44444445F, -0.6666667F, 0.0F, -0.22222222F, -0.6666667F, 0.0F, 0.0F, -0.6666667F, 0.0F, 0.22222222F, -0.6666667F, 0.0F, 0.44444445F, -0.6666667F, 0.0F, 0.6666667F, -0.6666667F, 0.0F, 0.8888889F, -0.6666667F, 0.0F, -0.8888889F, -0.44444445F, 0.0F, -0.6666667F, -0.44444445F, 0.0F, -0.44444445F, -0.44444445F, 0.0F, -0.22222222F, -0.44444445F, 0.0F, 0.0F, -0.44444445F, 0.0F, 0.22222222F, -0.44444445F, 0.0F, 0.44444445F, -0.44444445F, 0.0F, 0.6666667F, -0.44444445F, 0.0F, 0.8888889F, -0.44444445F, 0.0F, -0.8888889F, -0.22222222F, 0.0F, -0.6666667F, -0.22222222F, 0.0F, -0.44444445F, -0.22222222F, 0.0F, -0.22222222F, -0.22222222F, 0.0F, 0.0F, -0.22222222F, 0.0F, 0.22222222F, -0.22222222F, 0.0F, 0.44444445F, -0.22222222F, 0.0F, 0.6666667F, -0.22222222F, 0.0F, 0.8888889F, -0.22222222F, 0.0F, -0.8888889F, 0.0F, 0.0F, -0.6666667F, 0.0F, 0.0F, -0.44444445F, 0.0F, 0.0F, -0.22222222F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.22222222F, 0.0F, 0.0F, 0.44444445F, 0.0F, 0.0F, 0.6666667F, 0.0F, 0.0F, 0.8888889F, 0.0F, 0.0F, -0.8888889F, 0.22222222F, 0.0F, -0.6666667F, 0.22222222F, 0.0F, -0.44444445F, 0.22222222F, 0.0F, -0.22222222F, 0.22222222F, 0.0F, 0.0F, 0.22222222F, 0.0F, 0.22222222F, 0.22222222F, 0.0F, 0.44444445F, 0.22222222F, 0.0F, 0.6666667F, 0.22222222F, 0.0F, 0.8888889F, 0.22222222F, 0.0F, -0.8888889F, 0.44444445F, 0.0F, -0.6666667F, 0.44444445F, 0.0F, -0.44444445F, 0.44444445F, 0.0F, -0.22222222F, 0.44444445F, 0.0F, 0.0F, 0.44444445F, 0.0F, 0.22222222F, 0.44444445F, 0.0F, 0.44444445F, 0.44444445F, 0.0F, 0.6666667F, 0.44444445F, 0.0F, 0.8888889F, 0.44444445F, 0.0F, -0.8888889F, 0.6666667F, 0.0F, -0.6666667F, 0.6666667F, 0.0F, -0.44444445F, 0.6666667F, 0.0F, -0.22222222F, 0.6666667F, 0.0F, 0.0F, 0.6666667F, 0.0F, 0.22222222F, 0.6666667F, 0.0F, 0.44444445F, 0.6666667F, 0.0F, 0.6666667F, 0.6666667F, 0.0F, 0.8888889F, 0.6666667F, 0.0F, -0.8888889F, 0.8888889F, 0.0F, -0.6666667F, 0.8888889F, 0.0F, -0.44444445F, 0.8888889F, 0.0F, -0.22222222F, 0.8888889F, 0.0F, 0.0F, 0.8888889F, 0.0F, 0.22222222F, 0.8888889F, 0.0F, 0.44444445F, 0.8888889F, 0.0F, 0.6666667F, 0.8888889F, 0.0F, 0.8888889F, 0.8888889F, 0.0F, -0.8888889F, -0.8888889F, 0.22222222F, -0.6666667F, -0.8888889F, 0.22222222F, -0.44444445F, -0.8888889F, 0.22222222F, -0.22222222F, -0.8888889F, 0.22222222F, 0.0F, -0.8888889F, 0.22222222F, 0.22222222F, -0.8888889F, 0.22222222F, 0.44444445F, -0.8888889F, 0.22222222F, 0.6666667F, -0.8888889F, 0.22222222F, 0.8888889F, -0.8888889F, 0.22222222F, -0.8888889F, -0.6666667F, 0.22222222F, -0.6666667F, -0.6666667F, 0.22222222F, -0.44444445F, -0.6666667F, 0.22222222F, -0.22222222F, -0.6666667F, 0.22222222F, 0.0F, -0.6666667F, 0.22222222F, 0.22222222F, -0.6666667F, 0.22222222F, 0.44444445F, -0.6666667F, 0.22222222F, 0.6666667F, -0.6666667F, 0.22222222F, 0.8888889F, -0.6666667F, 0.22222222F, -0.8888889F, -0.44444445F, 0.22222222F, -0.6666667F, -0.44444445F, 0.22222222F, -0.44444445F, -0.44444445F, 0.22222222F, -0.22222222F, -0.44444445F, 0.22222222F, 0.0F, -0.44444445F, 0.22222222F, 0.22222222F, -0.44444445F, 0.22222222F, 0.44444445F, -0.44444445F, 0.22222222F, 0.6666667F, -0.44444445F, 0.22222222F, 0.8888889F, -0.44444445F, 0.22222222F, -0.8888889F, -0.22222222F, 0.22222222F, -0.6666667F, -0.22222222F, 0.22222222F, -0.44444445F, -0.22222222F, 0.22222222F, -0.22222222F, -0.22222222F, 0.22222222F, 0.0F, -0.22222222F, 0.22222222F, 0.22222222F, -0.22222222F, 0.22222222F, 0.44444445F, -0.22222222F, 0.22222222F, 0.6666667F, -0.22222222F, 0.22222222F, 0.8888889F, -0.22222222F, 0.22222222F, -0.8888889F, 0.0F, 0.22222222F, -0.6666667F, 0.0F, 0.22222222F, -0.44444445F, 0.0F, 0.22222222F, -0.22222222F, 0.0F, 0.22222222F, 0.0F, 0.0F, 0.22222222F, 0.22222222F, 0.0F, 0.22222222F, 0.44444445F, 0.0F, 0.22222222F, 0.6666667F, 0.0F, 0.22222222F, 0.8888889F, 0.0F, 0.22222222F, -0.8888889F, 0.22222222F, 0.22222222F, -0.6666667F, 0.22222222F, 0.22222222F, -0.44444445F, 0.22222222F, 0.22222222F, -0.22222222F, 0.22222222F, 0.22222222F, 0.0F, 0.22222222F, 0.22222222F, 0.22222222F, 0.22222222F, 0.22222222F, 0.44444445F, 0.22222222F, 0.22222222F, 0.6666667F, 0.22222222F, 0.22222222F, 0.8888889F, 0.22222222F, 0.22222222F, -0.8888889F, 0.44444445F, 0.22222222F, -0.6666667F, 0.44444445F, 0.22222222F, -0.44444445F, 0.44444445F, 0.22222222F, -0.22222222F, 0.44444445F, 0.22222222F, 0.0F, 0.44444445F, 0.22222222F, 0.22222222F, 0.44444445F, 0.22222222F, 0.44444445F, 0.44444445F, 0.22222222F, 0.6666667F, 0.44444445F, 0.22222222F, 0.8888889F, 0.44444445F, 0.22222222F, -0.8888889F, 0.6666667F, 0.22222222F, -0.6666667F, 0.6666667F, 0.22222222F, -0.44444445F, 0.6666667F, 0.22222222F, -0.22222222F, 0.6666667F, 0.22222222F, 0.0F, 0.6666667F, 0.22222222F, 0.22222222F, 0.6666667F, 0.22222222F, 0.44444445F, 0.6666667F, 0.22222222F, 0.6666667F, 0.6666667F, 0.22222222F, 0.8888889F, 0.6666667F, 0.22222222F, -0.8888889F, 0.8888889F, 0.22222222F, -0.6666667F, 0.8888889F, 0.22222222F, -0.44444445F, 0.8888889F, 0.22222222F, -0.22222222F, 0.8888889F, 0.22222222F, 0.0F, 0.8888889F, 0.22222222F, 0.22222222F, 0.8888889F, 0.22222222F, 0.44444445F, 0.8888889F, 0.22222222F, 0.6666667F, 0.8888889F, 0.22222222F, 0.8888889F, 0.8888889F, 0.22222222F, -0.8888889F, -0.8888889F, 0.44444445F, -0.6666667F, -0.8888889F, 0.44444445F, -0.44444445F, -0.8888889F, 0.44444445F, -0.22222222F, -0.8888889F, 0.44444445F, 0.0F, -0.8888889F, 0.44444445F, 0.22222222F, -0.8888889F, 0.44444445F, 0.44444445F, -0.8888889F, 0.44444445F, 0.6666667F, -0.8888889F, 0.44444445F, 0.8888889F, -0.8888889F, 0.44444445F, -0.8888889F, -0.6666667F, 0.44444445F, -0.6666667F, -0.6666667F, 0.44444445F, -0.44444445F, -0.6666667F, 0.44444445F, -0.22222222F, -0.6666667F, 0.44444445F, 0.0F, -0.6666667F, 0.44444445F, 0.22222222F, -0.6666667F, 0.44444445F, 0.44444445F, -0.6666667F, 0.44444445F, 0.6666667F, -0.6666667F, 0.44444445F, 0.8888889F, -0.6666667F, 0.44444445F, -0.8888889F, -0.44444445F, 0.44444445F, -0.6666667F, -0.44444445F, 0.44444445F, -0.44444445F, -0.44444445F, 0.44444445F, -0.22222222F, -0.44444445F, 0.44444445F, 0.0F, -0.44444445F, 0.44444445F, 0.22222222F, -0.44444445F, 0.44444445F, 0.44444445F, -0.44444445F, 0.44444445F, 0.6666667F, -0.44444445F, 0.44444445F, 0.8888889F, -0.44444445F, 0.44444445F, -0.8888889F, -0.22222222F, 0.44444445F, -0.6666667F, -0.22222222F, 0.44444445F, -0.44444445F, -0.22222222F, 0.44444445F, -0.22222222F, -0.22222222F, 0.44444445F, 0.0F, -0.22222222F, 0.44444445F, 0.22222222F, -0.22222222F, 0.44444445F, 0.44444445F, -0.22222222F, 0.44444445F, 0.6666667F, -0.22222222F, 0.44444445F, 0.8888889F, -0.22222222F, 0.44444445F, -0.8888889F, 0.0F, 0.44444445F, -0.6666667F, 0.0F, 0.44444445F, -0.44444445F, 0.0F, 0.44444445F, -0.22222222F, 0.0F, 0.44444445F, 0.0F, 0.0F, 0.44444445F, 0.22222222F, 0.0F, 0.44444445F, 0.44444445F, 0.0F, 0.44444445F, 0.6666667F, 0.0F, 0.44444445F, 0.8888889F, 0.0F, 0.44444445F, -0.8888889F, 0.22222222F, 0.44444445F, -0.6666667F, 0.22222222F, 0.44444445F, -0.44444445F, 0.22222222F, 0.44444445F, -0.22222222F, 0.22222222F, 0.44444445F, 0.0F, 0.22222222F, 0.44444445F, 0.22222222F, 0.22222222F, 0.44444445F, 0.44444445F, 0.22222222F, 0.44444445F, 0.6666667F, 0.22222222F, 0.44444445F, 0.8888889F, 0.22222222F, 0.44444445F, -0.8888889F, 0.44444445F, 0.44444445F, -0.6666667F, 0.44444445F, 0.44444445F, -0.44444445F, 0.44444445F, 0.44444445F, -0.22222222F, 0.44444445F, 0.44444445F, 0.0F, 0.44444445F, 0.44444445F, 0.22222222F, 0.44444445F, 0.44444445F, 0.44444445F, 0.44444445F, 0.44444445F, 0.6666667F, 0.44444445F, 0.44444445F, 0.8888889F, 0.44444445F, 0.44444445F, -0.8888889F, 0.6666667F, 0.44444445F, -0.6666667F, 0.6666667F, 0.44444445F, -0.44444445F, 0.6666667F, 0.44444445F, -0.22222222F, 0.6666667F, 0.44444445F, 0.0F, 0.6666667F, 0.44444445F, 0.22222222F, 0.6666667F, 0.44444445F, 0.44444445F, 0.6666667F, 0.44444445F, 0.6666667F, 0.6666667F, 0.44444445F, 0.8888889F, 0.6666667F, 0.44444445F, -0.8888889F, 0.8888889F, 0.44444445F, -0.6666667F, 0.8888889F, 0.44444445F, -0.44444445F, 0.8888889F, 0.44444445F, -0.22222222F, 0.8888889F, 0.44444445F, 0.0F, 0.8888889F, 0.44444445F, 0.22222222F, 0.8888889F, 0.44444445F, 0.44444445F, 0.8888889F, 0.44444445F, 0.6666667F, 0.8888889F, 0.44444445F, 0.8888889F, 0.8888889F, 0.44444445F, -0.8888889F, -0.8888889F, 0.6666667F, -0.6666667F, -0.8888889F, 0.6666667F, -0.44444445F, -0.8888889F, 0.6666667F, -0.22222222F, -0.8888889F, 0.6666667F, 0.0F, -0.8888889F, 0.6666667F, 0.22222222F, -0.8888889F, 0.6666667F, 0.44444445F, -0.8888889F, 0.6666667F, 0.6666667F, -0.8888889F, 0.6666667F, 0.8888889F, -0.8888889F, 0.6666667F, -0.8888889F, -0.6666667F, 0.6666667F, -0.6666667F, -0.6666667F, 0.6666667F, -0.44444445F, -0.6666667F, 0.6666667F, -0.22222222F, -0.6666667F, 0.6666667F, 0.0F, -0.6666667F, 0.6666667F, 0.22222222F, -0.6666667F, 0.6666667F, 0.44444445F, -0.6666667F, 0.6666667F, 0.6666667F, -0.6666667F, 0.6666667F, 0.8888889F, -0.6666667F, 0.6666667F, -0.8888889F, -0.44444445F, 0.6666667F, -0.6666667F, -0.44444445F, 0.6666667F, -0.44444445F, -0.44444445F, 0.6666667F, -0.22222222F, -0.44444445F, 0.6666667F, 0.0F, -0.44444445F, 0.6666667F, 0.22222222F, -0.44444445F, 0.6666667F, 0.44444445F, -0.44444445F, 0.6666667F, 0.6666667F, -0.44444445F, 0.6666667F, 0.8888889F, -0.44444445F, 0.6666667F, -0.8888889F, -0.22222222F, 0.6666667F, -0.6666667F, -0.22222222F, 0.6666667F, -0.44444445F, -0.22222222F, 0.6666667F, -0.22222222F, -0.22222222F, 0.6666667F, 0.0F, -0.22222222F, 0.6666667F, 0.22222222F, -0.22222222F, 0.6666667F, 0.44444445F, -0.22222222F, 0.6666667F, 0.6666667F, -0.22222222F, 0.6666667F, 0.8888889F, -0.22222222F, 0.6666667F, -0.8888889F, 0.0F, 0.6666667F, -0.6666667F, 0.0F, 0.6666667F, -0.44444445F, 0.0F, 0.6666667F, -0.22222222F, 0.0F, 0.6666667F, 0.0F, 0.0F, 0.6666667F, 0.22222222F, 0.0F, 0.6666667F, 0.44444445F, 0.0F, 0.6666667F, 0.6666667F, 0.0F, 0.6666667F, 0.8888889F, 0.0F, 0.6666667F, -0.8888889F, 0.22222222F, 0.6666667F, -0.6666667F, 0.22222222F, 0.6666667F, -0.44444445F, 0.22222222F, 0.6666667F, -0.22222222F, 0.22222222F, 0.6666667F, 0.0F, 0.22222222F, 0.6666667F, 0.22222222F, 0.22222222F, 0.6666667F, 0.44444445F, 0.22222222F, 0.6666667F, 0.6666667F, 0.22222222F, 0.6666667F, 0.8888889F, 0.22222222F, 0.6666667F, -0.8888889F, 0.44444445F, 0.6666667F, -0.6666667F, 0.44444445F, 0.6666667F, -0.44444445F, 0.44444445F, 0.6666667F, -0.22222222F, 0.44444445F, 0.6666667F, 0.0F, 0.44444445F, 0.6666667F, 0.22222222F, 0.44444445F, 0.6666667F, 0.44444445F, 0.44444445F, 0.6666667F, 0.6666667F, 0.44444445F, 0.6666667F, 0.8888889F, 0.44444445F, 0.6666667F, -0.8888889F, 0.6666667F, 0.6666667F, -0.6666667F, 0.6666667F, 0.6666667F, -0.44444445F, 0.6666667F, 0.6666667F, -0.22222222F, 0.6666667F, 0.6666667F, 0.0F, 0.6666667F, 0.6666667F, 0.22222222F, 0.6666667F, 0.6666667F, 0.44444445F, 0.6666667F, 0.6666667F, 0.6666667F, 0.6666667F, 0.6666667F, 0.8888889F, 0.6666667F, 0.6666667F, -0.8888889F, 0.8888889F, 0.6666667F, -0.6666667F, 0.8888889F, 0.6666667F, -0.44444445F, 0.8888889F, 0.6666667F, -0.22222222F, 0.8888889F, 0.6666667F, 0.0F, 0.8888889F, 0.6666667F, 0.22222222F, 0.8888889F, 0.6666667F, 0.44444445F, 0.8888889F, 0.6666667F, 0.6666667F, 0.8888889F, 0.6666667F, 0.8888889F, 0.8888889F, 0.6666667F, -0.8888889F, -0.8888889F, 0.8888889F, -0.6666667F, -0.8888889F, 0.8888889F, -0.44444445F, -0.8888889F, 0.8888889F, -0.22222222F, -0.8888889F, 0.8888889F, 0.0F, -0.8888889F, 0.8888889F, 0.22222222F, -0.8888889F, 0.8888889F, 0.44444445F, -0.8888889F, 0.8888889F, 0.6666667F, -0.8888889F, 0.8888889F, 0.8888889F, -0.8888889F, 0.8888889F, -0.8888889F, -0.6666667F, 0.8888889F, -0.6666667F, -0.6666667F, 0.8888889F, -0.44444445F, -0.6666667F, 0.8888889F, -0.22222222F, -0.6666667F, 0.8888889F, 0.0F, -0.6666667F, 0.8888889F, 0.22222222F, -0.6666667F, 0.8888889F, 0.44444445F, -0.6666667F, 0.8888889F, 0.6666667F, -0.6666667F, 0.8888889F, 0.8888889F, -0.6666667F, 0.8888889F, -0.8888889F, -0.44444445F, 0.8888889F, -0.6666667F, -0.44444445F, 0.8888889F, -0.44444445F, -0.44444445F, 0.8888889F, -0.22222222F, -0.44444445F, 0.8888889F, 0.0F, -0.44444445F, 0.8888889F, 0.22222222F, -0.44444445F, 0.8888889F, 0.44444445F, -0.44444445F, 0.8888889F, 0.6666667F, -0.44444445F, 0.8888889F, 0.8888889F, -0.44444445F, 0.8888889F, -0.8888889F, -0.22222222F, 0.8888889F, -0.6666667F, -0.22222222F, 0.8888889F, -0.44444445F, -0.22222222F, 0.8888889F, -0.22222222F, -0.22222222F, 0.8888889F, 0.0F, -0.22222222F, 0.8888889F, 0.22222222F, -0.22222222F, 0.8888889F, 0.44444445F, -0.22222222F, 0.8888889F, 0.6666667F, -0.22222222F, 0.8888889F, 0.8888889F, -0.22222222F, 0.8888889F, -0.8888889F, 0.0F, 0.8888889F, -0.6666667F, 0.0F, 0.8888889F, -0.44444445F, 0.0F, 0.8888889F, -0.22222222F, 0.0F, 0.8888889F, 0.0F, 0.0F, 0.8888889F, 0.22222222F, 0.0F, 0.8888889F, 0.44444445F, 0.0F, 0.8888889F, 0.6666667F, 0.0F, 0.8888889F, 0.8888889F, 0.0F, 0.8888889F, -0.8888889F, 0.22222222F, 0.8888889F, -0.6666667F, 0.22222222F, 0.8888889F, -0.44444445F, 0.22222222F, 0.8888889F, -0.22222222F, 0.22222222F, 0.8888889F, 0.0F, 0.22222222F, 0.8888889F, 0.22222222F, 0.22222222F, 0.8888889F, 0.44444445F, 0.22222222F, 0.8888889F, 0.6666667F, 0.22222222F, 0.8888889F, 0.8888889F, 0.22222222F, 0.8888889F, -0.8888889F, 0.44444445F, 0.8888889F, -0.6666667F, 0.44444445F, 0.8888889F, -0.44444445F, 0.44444445F, 0.8888889F, -0.22222222F, 0.44444445F, 0.8888889F, 0.0F, 0.44444445F, 0.8888889F, 0.22222222F, 0.44444445F, 0.8888889F, 0.44444445F, 0.44444445F, 0.8888889F, 0.6666667F, 0.44444445F, 0.8888889F, 0.8888889F, 0.44444445F, 0.8888889F, -0.8888889F, 0.6666667F, 0.8888889F, -0.6666667F, 0.6666667F, 0.8888889F, -0.44444445F, 0.6666667F, 0.8888889F, -0.22222222F, 0.6666667F, 0.8888889F, 0.0F, 0.6666667F, 0.8888889F, 0.22222222F, 0.6666667F, 0.8888889F, 0.44444445F, 0.6666667F, 0.8888889F, 0.6666667F, 0.6666667F, 0.8888889F, 0.8888889F, 0.6666667F, 0.8888889F, -0.8888889F, 0.8888889F, 0.8888889F, -0.6666667F, 0.8888889F, 0.8888889F, -0.44444445F, 0.8888889F, 0.8888889F, -0.22222222F, 0.8888889F, 0.8888889F, 0.0F, 0.8888889F, 0.8888889F, 0.22222222F, 0.8888889F, 0.8888889F, 0.44444445F, 0.8888889F, 0.8888889F, 0.6666667F, 0.8888889F, 0.8888889F, 0.8888889F, 0.8888889F, 0.8888889F };
    public static final int[] table_ab1_codelength = { 0, 5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
    public static final float[][] table_ab1_groupingtables = { null, grouping_5bits, null, null, null, null, null, null, null, null, null, null, null, null, null, null };
    public static final float[] table_ab1_factor = { 0.0F, 0.5F, 0.25F, 0.125F, 0.0625F, 0.03125F, 0.015625F, 0.0078125F, 0.00390625F, 0.001953125F, 9.765625E-4F, 4.8828125E-4F, 2.4414062E-4F, 1.2207031E-4F, 6.1035156E-5F, 3.0517578E-5F };
    public static final float[] table_ab1_c = { 0.0F, 1.3333334F, 1.1428572F, 1.0666667F, 1.032258F, 1.0158731F, 1.007874F, 1.0039216F, 1.0019569F, 1.0009775F, 1.0004885F, 1.0002443F, 1.0001221F, 1.000061F, 1.0000305F, 1.0000153F };
    public static final float[] table_ab1_d = { 0.0F, 0.5F, 0.25F, 0.125F, 0.0625F, 0.03125F, 0.015625F, 0.0078125F, 0.00390625F, 0.001953125F, 9.765625E-4F, 4.8828125E-4F, 2.4414062E-4F, 1.2207031E-4F, 6.103516E-5F, 3.051758E-5F };
    public static final float[][] table_ab234_groupingtables = { null, grouping_5bits, grouping_7bits, null, grouping_10bits, null, null, null, null, null, null, null, null, null, null, null };
    public static final int[] table_ab2_codelength = { 0, 5, 7, 3, 10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16 };
    public static final float[] table_ab2_factor = { 0.0F, 0.5F, 0.25F, 0.25F, 0.125F, 0.125F, 0.0625F, 0.03125F, 0.015625F, 0.0078125F, 0.00390625F, 0.001953125F, 9.765625E-4F, 4.8828125E-4F, 2.4414062E-4F, 3.0517578E-5F };
    public static final float[] table_ab2_c = { 0.0F, 1.3333334F, 1.6F, 1.1428572F, 1.7777778F, 1.0666667F, 1.032258F, 1.0158731F, 1.007874F, 1.0039216F, 1.0019569F, 1.0009775F, 1.0004885F, 1.0002443F, 1.0001221F, 1.0000153F };
    public static final float[] table_ab2_d = { 0.0F, 0.5F, 0.5F, 0.25F, 0.5F, 0.125F, 0.0625F, 0.03125F, 0.015625F, 0.0078125F, 0.00390625F, 0.001953125F, 9.765625E-4F, 4.8828125E-4F, 2.4414062E-4F, 3.051758E-5F };
    public static final int[] table_ab3_codelength = { 0, 5, 7, 3, 10, 4, 5, 16 };
    public static final float[] table_ab3_factor = { 0.0F, 0.5F, 0.25F, 0.25F, 0.125F, 0.125F, 0.0625F, 3.0517578E-5F };
    public static final float[] table_ab3_c = { 0.0F, 1.3333334F, 1.6F, 1.1428572F, 1.7777778F, 1.0666667F, 1.032258F, 1.0000153F };
    public static final float[] table_ab3_d = { 0.0F, 0.5F, 0.5F, 0.25F, 0.5F, 0.125F, 0.0625F, 3.051758E-5F };
    public static final int[] table_ab4_codelength = { 0, 5, 7, 16 };
    public static final float[] table_ab4_factor = { 0.0F, 0.5F, 0.25F, 3.0517578E-5F };
    public static final float[] table_ab4_c = { 0.0F, 1.3333334F, 1.6F, 1.0000153F };
    public static final float[] table_ab4_d = { 0.0F, 0.5F, 0.5F, 3.051758E-5F };
    public static final int[] table_cd_codelength = { 0, 5, 7, 10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
    public static final float[][] table_cd_groupingtables = { null, grouping_5bits, grouping_7bits, grouping_10bits, null, null, null, null, null, null, null, null, null, null, null, null };
    public static final float[] table_cd_factor = { 0.0F, 0.5F, 0.25F, 0.125F, 0.125F, 0.0625F, 0.03125F, 0.015625F, 0.0078125F, 0.00390625F, 0.001953125F, 9.765625E-4F, 4.8828125E-4F, 2.4414062E-4F, 1.2207031E-4F, 6.1035156E-5F };
    public static final float[] table_cd_c = { 0.0F, 1.3333334F, 1.6F, 1.7777778F, 1.0666667F, 1.032258F, 1.0158731F, 1.007874F, 1.0039216F, 1.0019569F, 1.0009775F, 1.0004885F, 1.0002443F, 1.0001221F, 1.000061F, 1.0000305F };
    public static final float[] table_cd_d = { 0.0F, 0.5F, 0.5F, 0.5F, 0.125F, 0.0625F, 0.03125F, 0.015625F, 0.0078125F, 0.00390625F, 0.001953125F, 9.765625E-4F, 4.8828125E-4F, 2.4414062E-4F, 1.2207031E-4F, 6.103516E-5F };
    protected int subbandnumber;
    protected int allocation;
    protected int scfsi;
    protected float scalefactor1;
    protected float scalefactor2;
    protected float scalefactor3;
    protected int[] codelength = { 0 };
    protected float[][] groupingtable = new float[2][];
    protected float[] factor = { 0.0F };
    protected int groupnumber;
    protected int samplenumber;
    protected float[] samples = new float[3];
    protected float[] c = { 0.0F };
    protected float[] d = { 0.0F };
    
    public SubbandLayer2(int paramInt)
    {
      this.subbandnumber = paramInt;
      this.groupnumber = (this.samplenumber = 0);
    }
    
    protected int get_allocationlength(Header paramHeader)
    {
      if (paramHeader.version() == 1)
      {
        int i = paramHeader.bitrate_index();
        if (paramHeader.mode() != 3) {
          if (i == 4) {
            i = 1;
          } else {
            i -= 4;
          }
        }
        if ((i == 1) || (i == 2))
        {
          if (this.subbandnumber <= 1) {
            return 4;
          }
          return 3;
        }
        if (this.subbandnumber <= 10) {
          return 4;
        }
        if (this.subbandnumber <= 22) {
          return 3;
        }
        return 2;
      }
      if (this.subbandnumber <= 3) {
        return 4;
      }
      if (this.subbandnumber <= 10) {
        return 3;
      }
      return 2;
    }
    
    protected void prepare_sample_reading(Header paramHeader, int paramInt1, int paramInt2, float[] paramArrayOfFloat1, int[] paramArrayOfInt, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3)
    {
      int i = paramHeader.bitrate_index();
      if (paramHeader.mode() != 3) {
        if (i == 4) {
          i = 1;
        } else {
          i -= 4;
        }
      }
      if ((i == 1) || (i == 2))
      {
        this.groupingtable[paramInt2] = table_cd_groupingtables[paramInt1];
        paramArrayOfFloat1[0] = table_cd_factor[paramInt1];
        paramArrayOfInt[0] = table_cd_codelength[paramInt1];
        paramArrayOfFloat2[0] = table_cd_c[paramInt1];
        paramArrayOfFloat3[0] = table_cd_d[paramInt1];
      }
      else if (this.subbandnumber <= 2)
      {
        this.groupingtable[paramInt2] = table_ab1_groupingtables[paramInt1];
        paramArrayOfFloat1[0] = table_ab1_factor[paramInt1];
        paramArrayOfInt[0] = table_ab1_codelength[paramInt1];
        paramArrayOfFloat2[0] = table_ab1_c[paramInt1];
        paramArrayOfFloat3[0] = table_ab1_d[paramInt1];
      }
      else
      {
        this.groupingtable[paramInt2] = table_ab234_groupingtables[paramInt1];
        if (this.subbandnumber <= 10)
        {
          paramArrayOfFloat1[0] = table_ab2_factor[paramInt1];
          paramArrayOfInt[0] = table_ab2_codelength[paramInt1];
          paramArrayOfFloat2[0] = table_ab2_c[paramInt1];
          paramArrayOfFloat3[0] = table_ab2_d[paramInt1];
        }
        else if (this.subbandnumber <= 22)
        {
          paramArrayOfFloat1[0] = table_ab3_factor[paramInt1];
          paramArrayOfInt[0] = table_ab3_codelength[paramInt1];
          paramArrayOfFloat2[0] = table_ab3_c[paramInt1];
          paramArrayOfFloat3[0] = table_ab3_d[paramInt1];
        }
        else
        {
          paramArrayOfFloat1[0] = table_ab4_factor[paramInt1];
          paramArrayOfInt[0] = table_ab4_codelength[paramInt1];
          paramArrayOfFloat2[0] = table_ab4_c[paramInt1];
          paramArrayOfFloat3[0] = table_ab4_d[paramInt1];
        }
      }
    }
    
    public void read_allocation(Bitstream paramBitstream, Header paramHeader, Crc16 paramCrc16)
    {
      int i = get_allocationlength(paramHeader);
      this.allocation = paramBitstream.get_bits(i);
      if (paramCrc16 != null) {
        paramCrc16.add_bits(this.allocation, i);
      }
    }
    
    public void read_scalefactor_selection(Bitstream paramBitstream, Crc16 paramCrc16)
    {
      if (this.allocation != 0)
      {
        this.scfsi = paramBitstream.get_bits(2);
        if (paramCrc16 != null) {
          paramCrc16.add_bits(this.scfsi, 2);
        }
      }
    }
    
    public void read_scalefactor(Bitstream paramBitstream, Header paramHeader)
    {
      if (this.allocation != 0)
      {
        switch (this.scfsi)
        {
        case 0: 
          this.scalefactor1 = scalefactors[paramBitstream.get_bits(6)];
          this.scalefactor2 = scalefactors[paramBitstream.get_bits(6)];
          this.scalefactor3 = scalefactors[paramBitstream.get_bits(6)];
          break;
        case 1: 
          this.scalefactor1 = (this.scalefactor2 = scalefactors[paramBitstream.get_bits(6)]);
          this.scalefactor3 = scalefactors[paramBitstream.get_bits(6)];
          break;
        case 2: 
          this.scalefactor1 = (this.scalefactor2 = this.scalefactor3 = scalefactors[paramBitstream.get_bits(6)]);
          break;
        case 3: 
          this.scalefactor1 = scalefactors[paramBitstream.get_bits(6)];
          this.scalefactor2 = (this.scalefactor3 = scalefactors[paramBitstream.get_bits(6)]);
        }
        prepare_sample_reading(paramHeader, this.allocation, 0, this.factor, this.codelength, this.c, this.d);
      }
    }
    
    public boolean read_sampledata(Bitstream paramBitstream)
    {
      if (this.allocation != 0) {
        if (this.groupingtable[0] != null)
        {
          int i = paramBitstream.get_bits(this.codelength[0]);
          i += (i << 1);
          float[] arrayOfFloat1 = this.samples;
          float[] arrayOfFloat2 = this.groupingtable[0];
          int j = 0;
          int k = i;
          if (k > arrayOfFloat2.length - 3) {
            k = arrayOfFloat2.length - 3;
          }
          arrayOfFloat1[j] = arrayOfFloat2[k];
          k++;
          j++;
          arrayOfFloat1[j] = arrayOfFloat2[k];
          k++;
          j++;
          arrayOfFloat1[j] = arrayOfFloat2[k];
        }
        else
        {
          this.samples[0] = ((float)(paramBitstream.get_bits(this.codelength[0]) * this.factor[0] - 1.0D));
          this.samples[1] = ((float)(paramBitstream.get_bits(this.codelength[0]) * this.factor[0] - 1.0D));
          this.samples[2] = ((float)(paramBitstream.get_bits(this.codelength[0]) * this.factor[0] - 1.0D));
        }
      }
      this.samplenumber = 0;
      return ++this.groupnumber == 12;
    }
    
    public boolean put_next_sample(int paramInt, SynthesisFilter paramSynthesisFilter1, SynthesisFilter paramSynthesisFilter2)
    {
      if ((this.allocation != 0) && (paramInt != 2))
      {
        float f = this.samples[this.samplenumber];
        if (this.groupingtable[0] == null) {
          f = (f + this.d[0]) * this.c[0];
        }
        if (this.groupnumber <= 4) {
          f *= this.scalefactor1;
        } else if (this.groupnumber <= 8) {
          f *= this.scalefactor2;
        } else {
          f *= this.scalefactor3;
        }
        paramSynthesisFilter1.input_sample(f, this.subbandnumber);
      }
      return ++this.samplenumber == 3;
    }
  }
}


/* Location:              F:\Java\jl1.0.1.jar!\javazoom\jl\decoder\LayerIIDecoder.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       0.7.1
 */